<launch>
    <!-- change the below parameters to match your camera/scene setup -->
    <!-- <arg name="camera_info_topic" default="/camera/color/camera_info" /> -->
    <arg name="camera_info_topic" default="/camera/aligned_depth_to_color/camera_info" />
    <arg name="rgb_topic" default="/camera/color/image_raw" />
    <arg name="depth_topic" default="/camera/aligned_depth_to_color/image_raw" />
    <arg name="result_frame_id" default="camera_color_optical_frame" />
    <arg name="hsv_threshold_upper_limit" default="130 255 255" />
    <!-- <arg name="hsv_threshold_lower_limit" default="100 200 60" /> -->
    <arg name="hsv_threshold_lower_limit" default="90 90 30" />
    <!-- <arg name="hsv_threshold_lower_limit" default="90 90 90" /> -->
    <arg name="num_of_nodes" default="25" />
    <arg name="visualize_initialization_process" default="false" />

    <!-- modifying the below parameters is usually not needed -->
    <!-- kernel: 0 -> Laplacian; 1 -> 1st order; 2nd -> 2nd order; 3 -> Gaussian -->
    <arg name="kernel" default="1" />
    <arg name="multi_color_dlo" default="false" />

    <!-- the below arg is for quick sanity checking with GLTP.
         it should ALWAYS be set to FALSE when running TrackDLO -->
    <arg name="gltp" default="false" />

    <!-- load parameters to corresponding nodes -->
    <node name="trackdlo" pkg="trackdlo" type="trackdlo" output="screen">
        <param name="camera_info_topic" type="string" value="$(arg camera_info_topic)" />
        <param name="rgb_topic" type="string" value="$(arg rgb_topic)" />
        <param name="depth_topic" type="string" value="$(arg depth_topic)" />
        <param name="result_frame_id" type="string" value="$(arg result_frame_id)" />

        <param name="hsv_threshold_upper_limit" type="string" value="$(arg hsv_threshold_upper_limit)" />
        <param name="hsv_threshold_lower_limit" type="string" value="$(arg hsv_threshold_lower_limit)" />

        <!-- beta and lambda: MCT weights. the larger they are, the more rigid the object becomes -->
        <param name="beta" value="1" if="$(eval arg('kernel') == 0)"/>
        <param name="lambda" value="50000" if="$(eval arg('kernel') == 0)"/>

        <param name="beta" value="0.35" if="$(eval arg('kernel') == 1)"/>
        <param name="lambda" value="50000" if="$(eval arg('kernel') == 1)"/>

        <param name="beta" value="0.3" if="$(eval arg('kernel') == 2)"/>
        <param name="lambda" value="50000" if="$(eval arg('kernel') == 2)"/>

        <param name="beta" value="0.2" if="$(eval arg('kernel') == 3)"/>
        <param name="lambda" value="50000" if="$(eval arg('kernel') == 3)"/>

        <!-- alpha: the alignment strength -->
        <param name="alpha" value="3" />

        <!-- note that LLE is only used in the registration in the distance preservation step -->
        <param name="lle_weight" value="10.0" />

        <!-- mu: ranges from 0 to 1, large mu indicates the point cloud is noisy -->
        <param name="mu" value="0.1" />

        <!-- max_iter: the maximum number of iterations the EM loop undergoes before termination -->
        <param name="max_iter" value="50" />

        <!-- tol: EM optimization convergence tolerance -->
        <param name="tol" value="0.0002" />

        <!-- k_vis: the strength of visibility information's effect on membership probability computation -->
        <param name="k_vis" value="50" />

        <!-- set to false in the registration step because we did not have space in the paper to discuss LLE -->
        <param name="include_lle" value="false" />

        <!-- if set to true, 
             replace the Euclidean distances in kernel and posterior calculations with geodesic distances -->
        <param name="use_geodesic" value="true" />

        <!-- if set to true, 
             use the last registration step's sigma^2 to initialize the current registration's sigma^2 -->
        <param name="use_prev_sigma2" value="true" />
        
        <param name="kernel" value="$(arg kernel)" />
        <param name="downsample_leaf_size" value="0.008" />
        <param name="multi_color_dlo" type="bool" value="$(arg multi_color_dlo)" />
        <param name="visibility_threshold" type="double" value="0.008" />
        <param name="dlo_pixel_width" value="40" />
        <param name="gltp" type="bool" value="$(arg gltp)" />
    </node>

    <!-- launch python node for initialization -->
    <node name="init_tracker" pkg="trackdlo" type="initialize.py" output="screen">
        <param name="camera_info_topic" type="string" value="$(arg camera_info_topic)" />
        <param name="rgb_topic" type="string" value="$(arg rgb_topic)" />
        <param name="depth_topic" type="string" value="$(arg depth_topic)" />
        <param name="result_frame_id" type="string" value="$(arg result_frame_id)" />

        <param name="num_of_nodes" value="$(arg num_of_nodes)" />
        <param name="multi_color_dlo" type="bool" value="$(arg multi_color_dlo)" />
        <param name="visualize_initialization_process" type="bool" value="$(arg visualize_initialization_process)" />

        <param name="hsv_threshold_upper_limit" type="string" value="$(arg hsv_threshold_upper_limit)" />
        <param name="hsv_threshold_lower_limit" type="string" value="$(arg hsv_threshold_lower_limit)" />
    </node>

</launch>